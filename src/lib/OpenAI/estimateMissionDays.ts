import type { MissionEstimation, Project } from "../../types/project";
import { estimateMissionDaysWithCategoriesPipeline } from "./missionEstimationPipeline";

export type MissionDayEstimation = {
  [mission: string]: {
    [companyId: string]: {
      [personId1: string]: {
        nombreDeJours: number;
        justification: string;
      };
    };
  };
};

export interface CategoryTargetAmounts {
  base?: number;
  pse?: number;
  tranchesConditionnelles?: number;
  variantes?: number;
}

/**
 * Fonction principale d'estimation des missions bas√©e sur le pipeline en 6 √©tapes
 * conform√©ment √† la sp√©cification 12-spec_estimation_project.md
 *
 * √âtapes impl√©ment√©es selon la spec :
 * 1. Initialisation de la structure (analyzeProjectSpecifics)
 * 2. Int√©gration des contraintes (applyConstraintsAndOptimize)
 * 3. Allocation brute (generateBaseBudgetAllocation)
 * 4. V√©rification et ajustement (validateAndAdjustPercentages)
 * 5. Justifications (generateDetailedJustifications)
 * 6. Synth√®se finale (int√©gr√©e dans les √©tapes pr√©c√©dentes)
 *
 * @param currentProject - Projet contenant missions, entreprises, pourcentages et contraintes
 * @returns Promise<MissionEstimation> - Estimation d√©taill√©e avec jours et justifications
 */
export async function estimateMissionDaysWithCategories(
  currentProject: Project,
): Promise<MissionEstimation> {
  console.log("üöÄ Estimation des missions avec le pipeline conforme √† la spec");

  try {
    // Appel du pipeline principal qui impl√©mente les 6 √©tapes de la sp√©cification
    const result =
      await estimateMissionDaysWithCategoriesPipeline(currentProject);

    console.log("‚úÖ Estimation termin√©e avec succ√®s");
    return result;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'estimation des missions:", error);
    throw error;
  }
}
